{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "'use strict'\n\n\nEventEmitter = require('eventemitter3')\n{ isa\n  validate\n  type_of }               = ( new ( require 'intertype' ).Intertype() ).export()\n\nState = {\n  data:                   'state-data'\n  cdata:                  'state-cdata'\n  tagBegin:               'state-tag-begin'\n  tagName:                'state-tag-name'\n  tagEnd:                 'state-tag-end'\n  attributeNameStart:     'state-attribute-name-start'\n  attributeName:          'state-attribute-name'\n  attributeNameEnd:       'state-attribute-name-end'\n  attributeValueBegin:    'state-attribute-value-begin'\n  attributeValue:         'state-attribute-value'\n  }\n\nAction = {\n  lt:                     'action-lt'\n  gt:                     'action-gt'\n  space:                  'action-space'\n  equal:                  'action-equal'\n  quote:                  'action-quote'\n  slash:                  'action-slash'\n  chr:                    'action-chr'\n  error:                  'action-error'\n  }\n\nType = {\n  text:                   'text'\n  openTag:                'open'\n  closeTag:               'close'\n  attributeName:          'attribute-name'\n  attributeValue:         'attribute-value'\n  noop:                   'noop'\n  }\n\ncharToAction = {\n  ' ':                    Action.space\n  '\\t':                   Action.space\n  '\\n':                   Action.space\n  '\\r':                   Action.space\n  '<':                    Action.lt\n  '>':                    Action.gt\n  '\"':                    Action.quote\n  \"'\":                    Action.quote\n  '=':                    Action.equal\n  '/':                    Action.slash\n  }\n\n#-----------------------------------------------------------------------------------------------------------\ncreate = ( settings, handler ) ->\n  switch arity = arguments.length\n    when 0 then null\n    when 1 then [ settings, handler, ] = [ null, settings, ]\n    when 2 then null\n    else throw new Error \"^55563^ expected 1 or 2 arguments, got #{arity}\"\n  [ settings, handler, ] = [ handler, null, ] unless isa.function handler\n  ### TAINT validate.xmllexer_settings settings ? {} ###\n  ### TAINT validate.function handler ###\n  settings          = { { include_specials: false, }..., settings..., }\n  lexer             = new EventEmitter()\n  state             = State.data\n  data              = ''\n  tagName           = ''\n  attrName          = ''\n  attrValue         = ''\n  isClosing         = false\n  openingQuote      = ''\n\n  #-----------------------------------------------------------------------------------------------------------\n  action_from_chr = ( chr ) => charToAction[ chr ] ? Action.chr\n\n  #---------------------------------------------------------------------------------------------------------\n  step = ( src, idx, chr ) =>\n    if settings.debug then console.log state, chr\n    actions = lexer.stateMachine[ state ]\n    action  = actions[ action_from_chr chr ] ? actions[ Action.error ] ? actions[ Action.chr ]\n    action src, idx, chr\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  lexer.write = ( src ) =>\n    for idx in [ 0 ... src.length ]\n      step src, idx, src[ idx ]\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  lexer.flush = =>\n\n  #---------------------------------------------------------------------------------------------------------\n  emit = ( ref, src, idx, type, value ) =>\n    # sigil = null\n    # # tags like: '?xml', '!DOCTYPE', comments\n    unless settings.include_specials\n      return null if tagName[ 0 ] in '!?'\n      return null if type is Type.noop\n    # switch sigil = tagName[ 0 ]\n    #   when '?' then type = ''\n    #   when '!' then type = 'declaration'\n    # event.sigil = sigil if sigil?\n    event = { ref, type, value }\n    if handler? then  handler { ref, idx, type, value, }\n    else              lexer.emit 'data', { type, value, }\n\n  ```\n  lexer.stateMachine = {\n    [State.data]: {\n      [Action.lt]: ( src, idx, chr ) => {\n        if (data.trim()) {\n          emit( '^1^', src, idx, Type.text, data);\n        }\n        tagName = '';\n        isClosing = false;\n        state = State.tagBegin;\n      },\n      [Action.chr]: ( src, idx, chr ) => {\n        data += chr;\n      },\n    },\n    [State.cdata]: {\n      [Action.chr]: ( src, idx, chr ) => {\n        data += chr;\n        if (data.substr(-3) === ']]>') {\n          emit( '^2^', src, idx, Type.text, data.slice(0, -3));\n          data = '';\n          state = State.data;\n        }\n      },\n    },\n    [State.tagBegin]: {\n      [Action.space]: ( src, idx, chr ) => { emit( '^3^', src, idx, Type.noop, chr ); },\n      [Action.chr]: ( src, idx, chr ) => {\n        tagName = chr;\n        state = State.tagName;\n      },\n      [Action.slash]: ( src, idx, chr ) => {\n        tagName = '';\n        isClosing = true;\n      },\n    },\n    [State.tagName]: {\n      [Action.space]: ( src, idx, chr ) => {\n        if (isClosing) {\n          state = State.tagEnd;\n        } else {\n          state = State.attributeNameStart;\n          emit( '^4^', src, idx, Type.openTag, tagName);\n        }\n      },\n      [Action.gt]: ( src, idx, chr ) => {\n        if (isClosing) {\n          emit( '^5^', src, idx, Type.closeTag, tagName);\n        } else {\n          emit( '^6^', src, idx, Type.openTag, tagName);\n        }\n        data = '';\n        state = State.data;\n      },\n      [Action.slash]: ( src, idx, chr ) => {\n        state = State.tagEnd;\n        emit( '^7^', src, idx, Type.openTag, tagName);\n      },\n      [Action.chr]: ( src, idx, chr ) => {\n        tagName += chr;\n        if (tagName === '![CDATA[') {\n          state = State.cdata;\n          data = '';\n          tagName = '';\n        }\n      },\n    },\n    [State.tagEnd]: {\n      [Action.gt]: ( src, idx, chr ) => {\n        emit( '^8^', src, idx, Type.closeTag, tagName);\n        data = '';\n        state = State.data;\n      },\n      [Action.chr]: ( src, idx, chr ) => { emit( '^9^', src, idx, Type.noop, chr ); },\n    },\n    [State.attributeNameStart]: {\n      [Action.chr]: ( src, idx, chr ) => {\n        attrName = chr;\n        state = State.attributeName;\n      },\n      [Action.gt]: ( src, idx, chr ) => {\n        data = '';\n        state = State.data;\n      },\n      [Action.space]: ( src, idx, chr ) => { emit( '^10^', src, idx, Type.noop, chr ); },\n      [Action.slash]: ( src, idx, chr ) => {\n        isClosing = true;\n        state = State.tagEnd;\n      },\n    },\n    [State.attributeName]: {\n      [Action.space]: ( src, idx, chr ) => {\n        state = State.attributeNameEnd;\n      },\n      [Action.equal]: ( src, idx, chr ) => {\n        emit( '^11^', src, idx, Type.attributeName, attrName);\n        state = State.attributeValueBegin;\n      },\n      [Action.gt]: ( src, idx, chr ) => {\n        attrValue = '';\n        emit( '^12^', src, idx, Type.attributeName, attrName);\n        emit( '^13^', src, idx, Type.attributeValue, attrValue);\n        data = '';\n        state = State.data;\n      },\n      [Action.slash]: ( src, idx, chr ) => {\n        isClosing = true;\n        attrValue = '';\n        emit( '^14^', src, idx, Type.attributeName, attrName);\n        emit( '^15^', src, idx, Type.attributeValue, attrValue);\n        state = State.tagEnd;\n      },\n      [Action.chr]: ( src, idx, chr ) => {\n        attrName += chr;\n      },\n    },\n    [State.attributeNameEnd]: {\n      [Action.space]: ( src, idx, chr ) => { emit( '^16^', src, idx, Type.noop, chr ); },\n      [Action.equal]: ( src, idx, chr ) => {\n        emit( '^17^', src, idx, Type.attributeName, attrName);\n        state = State.attributeValueBegin;\n      },\n      [Action.gt]: ( src, idx, chr ) => {\n        attrValue = '';\n        emit( '^18^', src, idx, Type.attributeName, attrName);\n        emit( '^19^', src, idx, Type.attributeValue, attrValue);\n        data = '';\n        state = State.data;\n      },\n      [Action.chr]: ( src, idx, chr ) => {\n        attrValue = '';\n        emit( '^20^', src, idx, Type.attributeName, attrName);\n        emit( '^21^', src, idx, Type.attributeValue, attrValue);\n        attrName = chr;\n        state = State.attributeName;\n      },\n    },\n    [State.attributeValueBegin]: {\n      [Action.space]: ( src, idx, chr ) => { emit( '^22^', src, idx, Type.noop, chr ); },\n      [Action.quote]: ( src, idx, chr ) => {\n        openingQuote = chr;\n        attrValue = '';\n        state = State.attributeValue;\n      },\n      [Action.gt]: ( src, idx, chr ) => {\n        attrValue = '';\n        emit( '^23^', src, idx, Type.attributeValue, attrValue);\n        data = '';\n        state = State.data;\n      },\n      [Action.chr]: ( src, idx, chr ) => {\n        openingQuote = '';\n        attrValue = chr;\n        state = State.attributeValue;\n      },\n    },\n    [State.attributeValue]: {\n      [Action.space]: ( src, idx, chr ) => {\n        if (openingQuote) {\n          attrValue += chr;\n        } else {\n          emit( '^24^', src, idx, Type.attributeValue, attrValue);\n          state = State.attributeNameStart;\n        }\n      },\n      [Action.quote]: ( src, idx, chr ) => {\n        if (openingQuote === chr) {\n          emit( '^25^', src, idx, Type.attributeValue, attrValue);\n          state = State.attributeNameStart;\n        } else {\n          attrValue += chr;\n        }\n      },\n      [Action.gt]: ( src, idx, chr ) => {\n        if (openingQuote) {\n          attrValue += chr;\n        } else {\n          emit( '^26^', src, idx, Type.attributeValue, attrValue);\n          data = '';\n          state = State.data;\n        }\n      },\n      [Action.slash]: ( src, idx, chr ) => {\n        if (openingQuote) {\n          attrValue += chr;\n        } else {\n          emit( '^27^', src, idx, Type.attributeValue, attrValue);\n          isClosing = true;\n          state = State.tagEnd;\n        }\n      },\n      [Action.chr]: ( src, idx, chr ) => {\n        attrValue += chr;\n      },\n    },\n  };\n\n\n  ```\n  return lexer\n\n\nmodule.exports = { State, Action, Type, create, }\n\n\n\n\n"
  ]
}