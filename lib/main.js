// Generated by CoffeeScript 2.5.1
(function() {
  'use strict';
  var Action, EventEmitter, State, Type, actions_by_chrs, create, isa, type_of, validate,
    indexOf = [].indexOf;

  EventEmitter = require('eventemitter3');

  ({isa, validate, type_of} = (new (require('intertype')).Intertype()).export());

  State = {
    data: 'state-data',
    cdata: 'state-cdata',
    tagBegin: 'state-tag-begin',
    tag_name: 'state-tag-name',
    tagEnd: 'state-tag-end',
    attributeNameStart: 'state-attribute-name-start',
    attributeName: 'state-attribute-name',
    attributeNameEnd: 'state-attribute-name-end',
    attributeValueBegin: 'state-attribute-value-begin',
    attributeValue: 'state-attribute-value'
  };

  Action = {
    lt: 'action-lt',
    gt: 'action-gt',
    space: 'action-space',
    equal: 'action-equal',
    quote: 'action-quote',
    slash: 'action-slash',
    chr: 'action-chr',
    error: 'action-error'
  };

  Type = {
    text: 'text',
    openTag: 'open',
    closeTag: 'close',
    attributeName: 'attribute-name',
    attributeValue: 'attribute-value',
    noop: 'noop'
  };

  actions_by_chrs = {
    ' ': Action.space,
    '\t': Action.space,
    '\n': Action.space,
    '\r': Action.space,
    '<': Action.lt,
    '>': Action.gt,
    '"': Action.quote,
    "'": Action.quote,
    '=': Action.equal,
    '/': Action.slash
  };

  //-----------------------------------------------------------------------------------------------------------
  create = function(settings, handler) {
    var arity, emit, lexer, state, step, ρ;
    switch (arity = arguments.length) {
      case 0:
        null;
        break;
      case 1:
        [settings, handler] = [null, settings];
        break;
      case 2:
        null;
        break;
      default:
        throw new Error(`^55563^ expected 1 or 2 arguments, got ${arity}`);
    }
    if (!isa.function(handler)) {
      [settings, handler] = [handler, null];
    }
    settings = {...{
        include_specials: false
      }, ...settings};
    lexer = new EventEmitter();
    state = State.data;
    //---------------------------------------------------------------------------------------------------------
    // Registers
    //---------------------------------------------------------------------------------------------------------
    ρ = {
      data: '',
      tag_name: '',
      attr_name: '',
      atr_value: '',
      is_closing: false,
      prv_quote: ''
    };
    //---------------------------------------------------------------------------------------------------------
    step = (src, idx, chr) => {
      var action, actions, ref1, ref2, ref3;
      if (settings.debug) {
        console.log(state, chr);
      }
      actions = lexer.stateMachine[state];
      action = (ref1 = (ref2 = actions[(ref3 = actions_by_chrs[chr]) != null ? ref3 : Action.chr]) != null ? ref2 : actions[Action.error]) != null ? ref1 : actions[Action.chr];
      action(src, idx, chr);
      return null;
    };
    //---------------------------------------------------------------------------------------------------------
    lexer.write = (src) => {
      var i, idx, ref1;
      for (idx = i = 0, ref1 = src.length; (0 <= ref1 ? i < ref1 : i > ref1); idx = 0 <= ref1 ? ++i : --i) {
        step(src, idx, src[idx]);
      }
      return null;
    };
    //---------------------------------------------------------------------------------------------------------
    lexer.flush = () => {};
    //---------------------------------------------------------------------------------------------------------
    emit = (ref, src, idx, type, value) => {
      var event, ref1;
      // sigil = null
      // # tags like: '?xml', '!DOCTYPE', comments
      if (!settings.include_specials) {
        if (ref1 = ρ.tag_name[0], indexOf.call('!?', ref1) >= 0) {
          return null;
        }
        if (type === Type.noop) {
          return null;
        }
      }
      // switch sigil = ρ.tag_name[ 0 ]
      //   when '?' then type = ''
      //   when '!' then type = 'declaration'
      // event.sigil = sigil if sigil?
      event = {ref, type, value};
      if (handler != null) {
        return handler({ref, idx, type, value});
      } else {
        return lexer.emit('data', {type, value});
      }
    };
    lexer.stateMachine = {
      //-------------------------------------------------------------------------------------------------------
      [State.data]: {
        //.....................................................................................................
        [Action.lt]: (src, idx, chr) => {
          if (ρ.data.trim().length > 0) {
            emit('^1^', src, idx, Type.text, ρ.data);
          }
          ρ.tag_name = '';
          ρ.is_closing = false;
          return state = State.tagBegin;
        },
        //.....................................................................................................
        [Action.chr]: ((src, idx, chr) => {
          return ρ.data += chr;
        })
      },
      //-------------------------------------------------------------------------------------------------------
      [State.cdata]: {
        //.....................................................................................................
        [Action.chr]: (src, idx, chr) => {
          ρ.data += chr;
          if ((ρ.data.substr(-3)) === ']]>') {
            emit('^2^', src, idx, Type.text, ρ.data.slice(0, -3));
            ρ.data = '';
            return state = State.data;
          }
        }
      },
      //-------------------------------------------------------------------------------------------------------
      [State.tagBegin]: {
        //.....................................................................................................
        [Action.space]: ((src, idx, chr) => {
          return emit('^3^', src, idx, Type.noop, chr);
        }),
        //.....................................................................................................
        [Action.chr]: (src, idx, chr) => {
          ρ.tag_name = chr;
          return state = State.tag_name;
        },
        //.....................................................................................................
        [Action.slash]: (src, idx, chr) => {
          ρ.tag_name = '';
          return ρ.is_closing = true;
        }
      },
      //-------------------------------------------------------------------------------------------------------
      [State.tag_name]: {
        //.....................................................................................................
        [Action.space]: (src, idx, chr) => {
          if (ρ.is_closing) {
            return state = State.tagEnd;
          } else {
            state = State.attributeNameStart;
            return emit('^4^', src, idx, Type.openTag, ρ.tag_name);
          }
        },
        //.....................................................................................................
        [Action.gt]: (src, idx, chr) => {
          if (ρ.is_closing) {
            emit('^5^', src, idx, Type.closeTag, ρ.tag_name);
          } else {
            emit('^6^', src, idx, Type.openTag, ρ.tag_name);
          }
          ρ.data = '';
          return state = State.data;
        },
        //.....................................................................................................
        [Action.slash]: (src, idx, chr) => {
          state = State.tagEnd;
          return emit('^7^', src, idx, Type.openTag, ρ.tag_name);
        },
        //.....................................................................................................
        [Action.chr]: (src, idx, chr) => {
          ρ.tag_name += chr;
          if (ρ.tag_name === '![CDATA[') {
            state = State.cdata;
            ρ.data = '';
            return ρ.tag_name = '';
          }
        }
      },
      //-------------------------------------------------------------------------------------------------------
      [State.tagEnd]: {
        //.....................................................................................................
        [Action.gt]: (src, idx, chr) => {
          emit('^8^', src, idx, Type.closeTag, ρ.tag_name);
          ρ.data = '';
          return state = State.data;
        },
        //.....................................................................................................
        [Action.chr]: ((src, idx, chr) => {
          return emit('^9^', src, idx, Type.noop, chr);
        })
      },
      //-------------------------------------------------------------------------------------------------------
      [State.attributeNameStart]: {
        //.....................................................................................................
        [Action.chr]: (src, idx, chr) => {
          ρ.attr_name = chr;
          return state = State.attributeName;
        },
        //.....................................................................................................
        [Action.gt]: (src, idx, chr) => {
          ρ.data = '';
          return state = State.data;
        },
        //.....................................................................................................
        [Action.space]: ((src, idx, chr) => {
          return emit('^10^', src, idx, Type.noop, chr);
        }),
        //.....................................................................................................
        [Action.slash]: (src, idx, chr) => {
          ρ.is_closing = true;
          return state = State.tagEnd;
        }
      },
      //-------------------------------------------------------------------------------------------------------
      [State.attributeName]: {
        //.....................................................................................................
        [Action.space]: (src, idx, chr) => {
          return state = State.attributeNameEnd;
        },
        //.....................................................................................................
        [Action.equal]: (src, idx, chr) => {
          emit('^11^', src, idx, Type.attributeName, ρ.attr_name);
          return state = State.attributeValueBegin;
        },
        //.....................................................................................................
        [Action.gt]: (src, idx, chr) => {
          ρ.atr_value = '';
          emit('^12^', src, idx, Type.attributeName, ρ.attr_name);
          emit('^13^', src, idx, Type.attributeValue, ρ.atr_value);
          ρ.data = '';
          return state = State.data;
        },
        //.....................................................................................................
        [Action.slash]: (src, idx, chr) => {
          ρ.is_closing = true;
          ρ.atr_value = '';
          emit('^14^', src, idx, Type.attributeName, ρ.attr_name);
          emit('^15^', src, idx, Type.attributeValue, ρ.atr_value);
          return state = State.tagEnd;
        },
        //.....................................................................................................
        [Action.chr]: (src, idx, chr) => {
          return ρ.attr_name += chr;
        }
      },
      //-------------------------------------------------------------------------------------------------------
      [State.attributeNameEnd]: {
        //.....................................................................................................
        [Action.space]: ((src, idx, chr) => {
          return emit('^16^', src, idx, Type.noop, chr);
        }),
        //.....................................................................................................
        [Action.equal]: (src, idx, chr) => {
          emit('^17^', src, idx, Type.attributeName, ρ.attr_name);
          return state = State.attributeValueBegin;
        },
        //.....................................................................................................
        [Action.gt]: (src, idx, chr) => {
          ρ.atr_value = '';
          emit('^18^', src, idx, Type.attributeName, ρ.attr_name);
          emit('^19^', src, idx, Type.attributeValue, ρ.atr_value);
          ρ.data = '';
          return state = State.data;
        },
        //.....................................................................................................
        [Action.chr]: (src, idx, chr) => {
          ρ.atr_value = '';
          emit('^20^', src, idx, Type.attributeName, ρ.attr_name);
          emit('^21^', src, idx, Type.attributeValue, ρ.atr_value);
          ρ.attr_name = chr;
          return state = State.attributeName;
        }
      },
      //-------------------------------------------------------------------------------------------------------
      [State.attributeValueBegin]: {
        //.....................................................................................................
        [Action.space]: ((src, idx, chr) => {
          return emit('^22^', src, idx, Type.noop, chr);
        }),
        //.....................................................................................................
        [Action.quote]: (src, idx, chr) => {
          ρ.prv_quote = chr;
          ρ.atr_value = '';
          return state = State.attributeValue;
        },
        //.....................................................................................................
        [Action.gt]: (src, idx, chr) => {
          ρ.atr_value = '';
          emit('^23^', src, idx, Type.attributeValue, ρ.atr_value);
          ρ.data = '';
          return state = State.data;
        },
        //.....................................................................................................
        [Action.chr]: (src, idx, chr) => {
          ρ.prv_quote = '';
          ρ.atr_value = chr;
          return state = State.attributeValue;
        }
      },
      //-------------------------------------------------------------------------------------------------------
      [State.attributeValue]: {
        //.....................................................................................................
        [Action.space]: (src, idx, chr) => {
          if (ρ.prv_quote.length > 0) {
            return ρ.atr_value += chr;
          } else {
            emit('^24^', src, idx, Type.attributeValue, ρ.atr_value);
            return state = State.attributeNameStart;
          }
        },
        //.....................................................................................................
        [Action.quote]: (src, idx, chr) => {
          if (chr === ρ.prv_quote) {
            emit('^25^', src, idx, Type.attributeValue, ρ.atr_value);
            return state = State.attributeNameStart;
          } else {
            return ρ.atr_value += chr;
          }
        },
        //.....................................................................................................
        [Action.gt]: (src, idx, chr) => {
          if (ρ.prv_quote.length > 0) {
            return ρ.atr_value += chr;
          } else {
            emit('^26^', src, idx, Type.attributeValue, ρ.atr_value);
            ρ.data = '';
            return state = State.data;
          }
        },
        //.....................................................................................................
        [Action.slash]: (src, idx, chr) => {
          if (ρ.prv_quote.length > 0) {
            return ρ.atr_value += chr;
          } else {
            emit('^27^', src, idx, Type.attributeValue, ρ.atr_value);
            ρ.is_closing = true;
            return state = State.tagEnd;
          }
        },
        //.....................................................................................................
        [Action.chr]: (src, idx, chr) => {
          return ρ.atr_value += chr;
        }
      }
    };
    //---------------------------------------------------------------------------------------------------------
    return lexer;
  };

  module.exports = {State, Action, Type, create};

}).call(this);

//# sourceMappingURL=main.js.map
