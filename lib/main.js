// Generated by CoffeeScript 2.5.1
(function() {
  'use strict';
  var EventEmitter, action_chr, action_equal, action_error, action_gt, action_lt, action_quote, action_slash, action_space, actions_by_chrs, create, isa, state_atrname, state_atrname_end, state_atrname_start, state_atrvalue, state_atrvalue_begin, state_cdata, state_data, state_tag_begin, state_tag_end, state_tagname, type_atrname, type_atrvalue, type_close, type_noop, type_of, type_open, type_text, validate,
    indexOf = [].indexOf;

  EventEmitter = require('eventemitter3');

  ({isa, validate, type_of} = (new (require('intertype')).Intertype()).export());

  state_data = 'state_data';

  state_cdata = 'state_cdata';

  state_tag_begin = 'state_tag_begin';

  state_tagname = 'state_tagname';

  state_tag_end = 'state_tag_end';

  state_atrname_start = 'state_atrname_start';

  state_atrname = 'state_atrname';

  state_atrname_end = 'state_atrname_end';

  state_atrvalue_begin = 'state_atrvalue_begin';

  state_atrvalue = 'state_atrvalue';

  action_lt = 'action_lt';

  action_gt = 'action_gt';

  action_space = 'action_space';

  action_equal = 'action_equal';

  action_quote = 'action_quote';

  action_slash = 'action_slash';

  action_chr = 'action_chr';

  action_error = 'action_error';

  type_text = 'text';

  type_open = 'open';

  type_close = 'close';

  type_atrname = 'atrname';

  type_atrvalue = 'atrvalue';

  type_noop = 'noop';

  actions_by_chrs = {
    ' ': action_space,
    '\t': action_space,
    '\n': action_space,
    '\r': action_space,
    '<': action_lt,
    '>': action_gt,
    '"': action_quote,
    "'": action_quote,
    '=': action_equal,
    '/': action_slash
  };

  //-----------------------------------------------------------------------------------------------------------
  create = function(settings, handler) {
    var arity, emit, lexer, step, ρ;
    switch (arity = arguments.length) {
      case 0:
        null;
        break;
      case 1:
        [settings, handler] = [null, settings];
        break;
      case 2:
        null;
        break;
      default:
        throw new Error(`^55563^ expected 1 or 2 arguments, got ${arity}`);
    }
    if (!isa.function(handler)) {
      [settings, handler] = [handler, null];
    }
    settings = {...{
        include_specials: false
      }, ...settings};
    lexer = new EventEmitter();
    //---------------------------------------------------------------------------------------------------------
    // Registers
    //---------------------------------------------------------------------------------------------------------
    ρ = {
      state: state_data,
      data: '',
      tagname: '',
      atrname: '',
      atrvalue: '',
      is_closing: false,
      prv_quote: ''
    };
    //---------------------------------------------------------------------------------------------------------
    step = (src, idx, chr) => {
      var action, actions, ref1, ref2, ref3;
      if (settings.debug) {
        console.log(ρ.state, chr);
      }
      actions = lexer.stateMachine[ρ.state];
      action = (ref1 = (ref2 = actions[(ref3 = actions_by_chrs[chr]) != null ? ref3 : action_chr]) != null ? ref2 : actions[action_error]) != null ? ref1 : actions[action_chr];
      action(src, idx, chr);
      return null;
    };
    //---------------------------------------------------------------------------------------------------------
    lexer.write = (src) => {
      var i, idx, ref1;
      for (idx = i = 0, ref1 = src.length; (0 <= ref1 ? i < ref1 : i > ref1); idx = 0 <= ref1 ? ++i : --i) {
        step(src, idx, src[idx]);
      }
      return null;
    };
    //---------------------------------------------------------------------------------------------------------
    lexer.flush = () => {};
    //---------------------------------------------------------------------------------------------------------
    emit = (ref, src, idx, type, value) => {
      var $key, event, k, ref1, registers, v;
      // sigil = null
      // # tags like: '?xml', '!DOCTYPE', comments
      if (!settings.include_specials) {
        if (ref1 = ρ.tagname[0], indexOf.call('!?', ref1) >= 0) {
          return null;
        }
        if (type === type_noop) {
          return null;
        }
      }
      // switch sigil = ρ.tagname[ 0 ]
      //   when '?' then type = ''
      //   when '!' then type = 'declaration'
      // event.sigil = sigil if sigil?
      event = {ref, type, value};
      registers = {};
      for (k in ρ) {
        v = ρ[k];
        if (v !== (void 0) && v !== '' && v !== false) {
          registers[k] = v;
        }
      }
      if (handler != null) {
        $key = `^xmlxr:${type}`;
        return handler({
          $key,
          type,
          value,
          idx,
          ρ: registers,
          ref
        });
      } else {
        return lexer.emit('data', {type, value});
      }
    };
    lexer.stateMachine = {
      //-------------------------------------------------------------------------------------------------------
      state_data: {
        //.....................................................................................................
        action_lt: (src, idx, chr) => {
          if (ρ.data.trim().length > 0) {
            emit('^1^', src, idx, type_text, ρ.data);
          }
          ρ.tagname = '';
          ρ.is_closing = false;
          return ρ.state = state_tag_begin;
        },
        //.....................................................................................................
        action_chr: ((src, idx, chr) => {
          return ρ.data += chr;
        })
      },
      //-------------------------------------------------------------------------------------------------------
      state_cdata: {
        //.....................................................................................................
        action_chr: (src, idx, chr) => {
          ρ.data += chr;
          if ((ρ.data.substr(-3)) === ']]>') {
            emit('^2^', src, idx, type_text, ρ.data.slice(0, -3));
            ρ.data = '';
            ρ.state = state_data;
          }
          return null;
        }
      },
      //-------------------------------------------------------------------------------------------------------
      state_tag_begin: {
        //.....................................................................................................
        action_space: ((src, idx, chr) => {
          return emit('^3^', src, idx, type_noop, chr);
        }),
        //.....................................................................................................
        action_chr: (src, idx, chr) => {
          ρ.tagname = chr;
          return ρ.state = state_tagname;
        },
        //.....................................................................................................
        action_slash: (src, idx, chr) => {
          ρ.tagname = '';
          return ρ.is_closing = true;
        }
      },
      //-------------------------------------------------------------------------------------------------------
      state_tagname: {
        //.....................................................................................................
        action_space: (src, idx, chr) => {
          if (ρ.is_closing) {
            return ρ.state = state_tag_end;
          } else {
            ρ.state = state_atrname_start;
            return emit('^4^', src, idx, type_open, ρ.tagname);
          }
        },
        //.....................................................................................................
        action_gt: (src, idx, chr) => {
          if (ρ.is_closing) {
            emit('^5^', src, idx, type_close, ρ.tagname);
          } else {
            emit('^6^', src, idx, type_open, ρ.tagname);
          }
          ρ.data = '';
          return ρ.state = state_data;
        },
        //.....................................................................................................
        action_slash: (src, idx, chr) => {
          ρ.state = state_tag_end;
          return emit('^7^', src, idx, type_open, ρ.tagname);
        },
        //.....................................................................................................
        action_chr: (src, idx, chr) => {
          ρ.tagname += chr;
          if (ρ.tagname === '![CDATA[') {
            ρ.state = state_cdata;
            ρ.data = '';
            return ρ.tagname = '';
          }
        }
      },
      //-------------------------------------------------------------------------------------------------------
      state_tag_end: {
        //.....................................................................................................
        action_gt: (src, idx, chr) => {
          emit('^8^', src, idx, type_close, ρ.tagname);
          ρ.data = '';
          return ρ.state = state_data;
        },
        //.....................................................................................................
        action_chr: ((src, idx, chr) => {
          return emit('^9^', src, idx, type_noop, chr);
        })
      },
      //-------------------------------------------------------------------------------------------------------
      state_atrname_start: {
        //.....................................................................................................
        action_chr: (src, idx, chr) => {
          ρ.atrname = chr;
          return ρ.state = state_atrname;
        },
        //.....................................................................................................
        action_gt: (src, idx, chr) => {
          ρ.data = '';
          return ρ.state = state_data;
        },
        //.....................................................................................................
        action_space: ((src, idx, chr) => {
          return emit('^10^', src, idx, type_noop, chr);
        }),
        //.....................................................................................................
        action_slash: (src, idx, chr) => {
          ρ.is_closing = true;
          return ρ.state = state_tag_end;
        }
      },
      //-------------------------------------------------------------------------------------------------------
      state_atrname: {
        //.....................................................................................................
        action_space: (src, idx, chr) => {
          return ρ.state = state_atrname_end;
        },
        //.....................................................................................................
        action_equal: (src, idx, chr) => {
          emit('^11^', src, idx, type_atrname, ρ.atrname);
          return ρ.state = state_atrvalue_begin;
        },
        //.....................................................................................................
        action_gt: (src, idx, chr) => {
          ρ.atrvalue = '';
          emit('^12^', src, idx, type_atrname, ρ.atrname);
          emit('^13^', src, idx, type_atrvalue, ρ.atrvalue);
          ρ.data = '';
          return ρ.state = state_data;
        },
        //.....................................................................................................
        action_slash: (src, idx, chr) => {
          ρ.is_closing = true;
          ρ.atrvalue = '';
          emit('^14^', src, idx, type_atrname, ρ.atrname);
          emit('^15^', src, idx, type_atrvalue, ρ.atrvalue);
          return ρ.state = state_tag_end;
        },
        //.....................................................................................................
        action_chr: (src, idx, chr) => {
          return ρ.atrname += chr;
        }
      },
      //-------------------------------------------------------------------------------------------------------
      state_atrname_end: {
        //.....................................................................................................
        action_space: ((src, idx, chr) => {
          return emit('^16^', src, idx, type_noop, chr);
        }),
        //.....................................................................................................
        action_equal: (src, idx, chr) => {
          emit('^17^', src, idx, type_atrname, ρ.atrname);
          return ρ.state = state_atrvalue_begin;
        },
        //.....................................................................................................
        action_gt: (src, idx, chr) => {
          ρ.atrvalue = '';
          emit('^18^', src, idx, type_atrname, ρ.atrname);
          emit('^19^', src, idx, type_atrvalue, ρ.atrvalue);
          ρ.data = '';
          return ρ.state = state_data;
        },
        //.....................................................................................................
        action_chr: (src, idx, chr) => {
          ρ.atrvalue = '';
          emit('^20^', src, idx, type_atrname, ρ.atrname);
          emit('^21^', src, idx, type_atrvalue, ρ.atrvalue);
          ρ.atrname = chr;
          return ρ.state = state_atrname;
        }
      },
      //-------------------------------------------------------------------------------------------------------
      state_atrvalue_begin: {
        //.....................................................................................................
        action_space: ((src, idx, chr) => {
          return emit('^22^', src, idx, type_noop, chr);
        }),
        //.....................................................................................................
        action_quote: (src, idx, chr) => {
          ρ.prv_quote = chr;
          ρ.atrvalue = '';
          return ρ.state = state_atrvalue;
        },
        //.....................................................................................................
        action_gt: (src, idx, chr) => {
          ρ.atrvalue = '';
          emit('^23^', src, idx, type_atrvalue, ρ.atrvalue);
          ρ.data = '';
          return ρ.state = state_data;
        },
        //.....................................................................................................
        action_chr: (src, idx, chr) => {
          ρ.prv_quote = '';
          ρ.atrvalue = chr;
          return ρ.state = state_atrvalue;
        }
      },
      //-------------------------------------------------------------------------------------------------------
      state_atrvalue: {
        //.....................................................................................................
        action_space: (src, idx, chr) => {
          if (ρ.prv_quote.length > 0) {
            return ρ.atrvalue += chr;
          } else {
            emit('^24^', src, idx, type_atrvalue, ρ.atrvalue);
            return ρ.state = state_atrname_start;
          }
        },
        //.....................................................................................................
        action_quote: (src, idx, chr) => {
          if (chr === ρ.prv_quote) {
            emit('^25^', src, idx, type_atrvalue, ρ.atrvalue);
            return ρ.state = state_atrname_start;
          } else {
            return ρ.atrvalue += chr;
          }
        },
        //.....................................................................................................
        action_gt: (src, idx, chr) => {
          if (ρ.prv_quote.length > 0) {
            return ρ.atrvalue += chr;
          } else {
            emit('^26^', src, idx, type_atrvalue, ρ.atrvalue);
            ρ.data = '';
            return ρ.state = state_data;
          }
        },
        //.....................................................................................................
        action_slash: (src, idx, chr) => {
          if (ρ.prv_quote.length > 0) {
            return ρ.atrvalue += chr;
          } else {
            emit('^27^', src, idx, type_atrvalue, ρ.atrvalue);
            ρ.is_closing = true;
            return ρ.state = state_tag_end;
          }
        },
        //.....................................................................................................
        action_chr: (src, idx, chr) => {
          return ρ.atrvalue += chr;
        }
      }
    };
    //---------------------------------------------------------------------------------------------------------
    return lexer;
  };

  module.exports = {state_data, state_cdata, state_tag_begin, state_tagname, state_tag_end, state_atrname_start, state_atrname, state_atrname_end, state_atrvalue_begin, state_atrvalue, action_lt, action_gt, action_space, action_equal, action_quote, action_slash, action_chr, action_error, type_text, type_open, type_close, type_atrname, type_atrvalue, type_noop, create};

}).call(this);

//# sourceMappingURL=main.js.map
